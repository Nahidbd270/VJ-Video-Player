# Don't Remove Credit @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot @Tech_VJ
# Ask Doubt on telegram @KingVJ01

import sys, glob, importlib, logging, logging.config, pytz, asyncio
from pathlib import Path
from datetime import date, datetime 
from aiohttp import web
from pyrogram import Client, idle 

# --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ---
from info import *
from typing import Union, Optional, AsyncGenerator
from Script import script 
from plugins import web_server
from TechVJ.bot import TechVJBot, TechVJBackUpBot
from TechVJ.util.keepalive import ping_server
from TechVJ.bot.clients import initialize_clients

# --- ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---
logging.config.fileConfig('logging.conf')
logging.getLogger().setLevel(logging.INFO)
logging.getLogger("pyrogram").setLevel(logging.ERROR)
logging.getLogger("imdbpy").setLevel(logging.ERROR)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logging.getLogger("aiohttp").setLevel(logging.ERROR)
logging.getLogger("aiohttp.web").setLevel(logging.ERROR)


# --- ‡¶™‡ßç‡¶≤‡¶æ‡¶ó‡¶á‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã ---
def load_plugins():
    """Dynamically load all plugins from the 'plugins' directory."""
    ppath = "plugins/*.py"
    files = glob.glob(ppath)
    for name in files:
        try:
            with open(name) as a:
                patt = Path(a.name)
                plugin_name = patt.stem
                import_path = f"plugins.{plugin_name}"
                spec = importlib.util.spec_from_file_location(import_path, Path(f"plugins/{plugin_name}.py"))
                load = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(load)
                sys.modules[import_path] = load
                logging.info(f"Tech VJ Imported => {plugin_name}")
        except Exception as e:
            logging.error(f"Failed to load plugin {name}: {e}")


async def main():
    """
    Main function to initialize and start the bot.
    """
    logging.info("Initializing Your Bot...")
    
    # --- ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶≤‡¶æ‡¶ó‡¶á‡¶® ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ---
    # ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü‡¶¶‡ßá‡¶∞ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶¨‡ßá async context ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá
    await TechVJBot.start()
    await TechVJBackUpBot.start()
    
    # ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ï‡ßç‡¶≤‡¶æ‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
    await initialize_clients()
    
    # ‡¶™‡ßç‡¶≤‡¶æ‡¶ó‡¶á‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
    load_plugins()

    # --- Heroku-‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Keep-alive ‡¶™‡¶ø‡¶Ç ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ---
    if ON_HEROKU:
        asyncio.create_task(ping_server())

    # --- ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶® ---
    app = web.AppRunner(await web_server())
    await app.setup()
    bind_address = "0.0.0.0"
    await web.TCPSite(app, bind_address, PORT).start()
    logging.info(f"Web server started on {bind_address}:{PORT}")

    # --- ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü‡¶Ü‡¶™ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶® ---
    bot_info = await TechVJBot.get_me()
    logging.info(f"Bot @{bot_info.username} started successfully!")
    
    tz = pytz.timezone('Asia/Kolkata')
    today = date.today()
    now = datetime.now(tz)
    time = now.strftime("%H:%M:%S %p")
    try:
        await TechVJBot.send_message(chat_id=LOG_CHANNEL, text=script.RESTART_TXT.format(today, time))
    except Exception as e:
        logging.warning(f"Could not send restart message to LOG_CHANNEL: {e}")

    # --- ‡¶¨‡¶ü‡¶ï‡ßá ‡¶∏‡¶ö‡¶≤ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶® ---
    await idle()

    # --- ‡¶∂‡¶æ‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ ---
    logging.info("Stopping clients...")
    await TechVJBot.stop()
    await TechVJBackUpBot.stop()
    await app.cleanup() # ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logging.info('Service Stopped Bye üëã')
    finally:
        # ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶≤‡ßÅ‡¶™‡¶ü‡¶ø ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
        loop.close()
        logging.info("Event loop closed.")
